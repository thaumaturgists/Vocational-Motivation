Yes, you can create a script that captures console log errors and pushes them into a `div`'s `textContent`. You can achieve this by overriding the default `console.error` method. Here's a simple example of how to do this:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Console Error Logger</title>
    <style>
        #errorLog {
            border: 1px solid #f00;
            padding: 10px;
            max-height: 200px;
            overflow-y: auto;
            background-color: #fdd;
        }
    </style>
</head>
<body>

<div id="errorLog">Error Log:</div>

<script>
    // Store the original console.error function
    const originalConsoleError = console.error;

    // Create a function to log errors to the div
    function logErrorToDiv(message) {
        const errorLogDiv = document.getElementById('errorLog');
        errorLogDiv.textContent += message + '\n'; // Append the error message
    }

    // Override console.error
    console.error = function(...args) {
        // Call the original console.error to keep the default behavior
        originalConsoleError.apply(console, args);
        
        // Log the error to the div
        logErrorToDiv(args.join(' '));
    };

    // Example usage
    console.error('This is an error message!');
    console.error('Another error occurred:', { errorCode: 123 });
</script>

</body>
</html>
```

### Explanation:
1. **HTML Structure**: We have a `div` with the ID `errorLog` where the error messages will be displayed.
2. **CSS**: Basic styling is applied to the `div` to make it visually distinct and scrollable if the content exceeds a certain height.
3. **JavaScript**:
   - We store the original `console.error` function so we can still use it later.
   - We define a function `logErrorToDiv` that appends error messages to the `div`.
   - We override `console.error` to call the original function and also log the error to the `div`.

### Usage:
You can test this by triggering `console.error` in your script, and you will see the error messages appear in the `div` as well as in the console.

If you want to capture and display errors that the browser catches (such as JavaScript runtime errors), you can use the `window.onerror` event handler. This allows you to catch unhandled errors and log them to a `div`. Here's how you can do it:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Browser Error Logger</title>
    <style>
        #errorLog {
            border: 1px solid #f00;
            padding: 10px;
            max-height: 200px;
            overflow-y: auto;
            background-color: #fdd;
        }
    </style>
</head>
<body>

<div id="errorLog">Error Log:</div>

<script>
    // Function to log errors to the div
    function logErrorToDiv(message) {
        const errorLogDiv = document.getElementById('errorLog');
        errorLogDiv.textContent += message + '\n'; // Append the error message
    }

    // Capture unhandled errors
    window.onerror = function(message, source, lineno, colno, error) {
        const errorMessage = `Error: ${message} at ${source}:${lineno}:${colno}`;
        logErrorToDiv(errorMessage);
        return true; // Prevent the default browser error handling
    };

    // Example of triggering an error
    // Uncomment the line below to see the error being caught
    // nonExistentFunction(); // This will cause a ReferenceError

    // Example of a handled error
    try {
        throw new Error("This is a manually thrown error.");
    } catch (e) {
        logErrorToDiv(`Caught error: ${e.message}`);
    }
</script>

</body>
</html>
```

### Explanation:
1. **HTML Structure**: The `div` with the ID `errorLog` is where the error messages will be displayed.
2. **CSS**: Basic styling is applied to make the `div` visually distinct and scrollable.
3. **JavaScript**:
   - The `logErrorToDiv` function appends error messages to the `div`.
   - The `window.onerror` event handler captures unhandled errors. It receives parameters that provide information about the error, including the error message, source file, line number, and column number.
   - The error message is formatted and logged to the `div`.
   - The `return true;` statement prevents the default browser error handling (like showing an error dialog).
   - An example of a manually thrown error is included to demonstrate how to log caught errors as well.

### Usage:
You can trigger an error by uncommenting the line `nonExistentFunction();`, which will cause a `ReferenceError`. You can also see how caught errors are logged by running the `try...catch` block.

To catch and handle errors in your browser, you can use the `window.onerror` event handler for unhandled exceptions and the `try...catch` statement for handling errors in specific blocks of code. Below are examples of both methods:

### 1. Using `window.onerror` for Global Error Handling

The `window.onerror` event handler allows you to catch unhandled errors that occur in your JavaScript code. Here's how to set it up:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Global Error Catching</title>
    <style>
        #errorLog {
            border: 1px solid #f00;
            padding: 10px;
            max-height: 200px;
            overflow-y: auto;
            background-color: #fdd;
        }
    </style>
</head>
<body>

<div id="errorLog">Error Log:</div>

<script>
    // Function to log errors to the div
    function logErrorToDiv(message) {
        const errorLogDiv = document.getElementById('errorLog');
        errorLogDiv.textContent += message + '\n'; // Append the error message
    }

    // Capture unhandled errors
    window.onerror = function(message, source, lineno, colno, error) {
        const errorMessage = `Error: ${message} at ${source}:${lineno}:${colno}`;
        logErrorToDiv(errorMessage);
        return true; // Prevent the default browser error handling
    };

    // Example of triggering an error
    // Uncomment the line below to see the error being caught
    // nonExistentFunction(); // This will cause a ReferenceError

</script>

</body>
</html>
```

### 2. Using `try...catch` for Specific Error Handling

You can also use `try...catch` blocks to handle errors that may occur in specific parts of your code. Here's an example:

```html
<script>
    // Function to log errors to the div
    function logErrorToDiv(message) {
        const errorLogDiv = document.getElementById('errorLog');
        errorLogDiv.textContent += message + '\n'; // Append the error message
    }

    // Example of a handled error
    try {
        // This will throw an error
        throw new Error("This is a manually thrown error.");
    } catch (e) {
        logErrorToDiv(`Caught error: ${e.message}`);
    }

    // Another example with a function that may throw an error
    function riskyFunction() {
        // Uncomment the line below to see the error being caught
        // return nonExistentFunction(); // This will cause a ReferenceError
    }

    try {
        riskyFunction();
    } catch (e) {
        logErrorToDiv(`Caught error in riskyFunction: ${e.message}`);
    }
</script>
```

### Summary

- **Global Error Handling**: Use `window.onerror` to catch unhandled errors globally. This is useful for logging errors that occur anywhere in your JavaScript code.
- **Specific Error Handling**: Use `try...catch` blocks to handle errors in specific sections of your code. This allows you to manage errors more granularly and take appropriate actions based on the context.

### Testing the Error Handling

To test the error handling:
- Uncomment the line `nonExistentFunction();` in the `window.onerror` example to trigger a `ReferenceError`.
- In the `try...catch` example, you can also uncomment the line in the `riskyFunction` to see how it handles the error.

By implementing these methods, you can effectively catch and log errors in your browser.
